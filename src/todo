## FLOW STUDIO

16/1/25: 21:51

- Transformar formato de árvore sintática em elementos html
- Simular comportamento de ui retornando texto ao invés de elementos DOM;
- Fazer testes unitários;
  - Dado a entrada da árvore sintática, retornar código html;


#### 1. Função

```javascript
async function A(context){}
```

##### Código html

```html
<table border="1">
  <tr>
    <td>A</td>
  </tr>
</table>
```

##### Árvore sintática

```JSON
{
  "A": []
}
```


##### Visualização

<table border="1">
  <tr>
    <td>A</td>
  </tr>
</table>


#### 2. Chamada de função

##### Código javascript

```javascript
async function A(context){
  await B(context);
}
```

##### Código html

```html
<table border="1">
  <tr>
    <td>A</td>
    <td>
      <table border="1">
        <tr>
          <td>B</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
```

##### Árvore sintática

```JSON
{
  "A": [
    [
      "B"
    ]
  ]
}
```

##### Visualização

<table border="1">
  <tr>
    <td>A</td>
  </tr>
  <tr>
    <td>
      <table border="1">
        <tr>
          <td>B</td>
        </tr>
      </table>
    </td>
  </tr>
</table>

#### 3. Chamada sequencial

##### Código javascript

```javascript
async function A(context){
  await B(context);
  await C(context);
}
```

##### Código html

```html
<table border="1">
  <tr>
    <td>A</td>
  </tr>
  <tr>
    <td>
      <table border="1">
        <tr>
          <td>B</td>
          <td></td>
        </tr>
        <tr>
          <td></td>
          <td>C</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
```

##### Árvore sintática

```JSON
{
  "A": [
    [
      "B",
    ],
    [
      "C"
    ]
  ]
}
```

##### Visualização

<table border="1">
  <tr>
    <td>A</td>
  </tr>
  <tr>
    <td>
      <table border="1">
        <tr>
          <td>B</td>
          <td></td>
        </tr>
        <tr>
          <td></td>
          <td>C</td>
        </tr>
      </table>
    </td>
  </tr>
</table>

#### 3. Chamada paralela

##### Código javascript

```javascript
async function A(context){
  await Promise.all([
    B(context),
    C(context)
  ]);
}
```
##### Código html

```html
<table border="1">
  <tr>
    <td>A</td>
  </tr>
  <tr>
    <td>
      <table border="1">
        <tr>
          <td>B</td>
        </tr>
         <tr>
          <td>C</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
```

##### Árvore sintática

```JSON
{
  "A": [
    [
      "B",
      "C",
    ],
  ]
}
```

##### Visualização

<table border="1">
  <tr>
    <td>A</td>
  </tr>
  <tr>
    <td>
      <table bordeA(r="1">
        <tr>
          <td>B</td>
        </tr>
         <tr>
          <td>C</td>
        </tr>
      </table>
    </td>
  </tr>
</table>